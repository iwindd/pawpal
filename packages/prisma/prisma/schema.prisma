generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String
  password    String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userWallets UserWallet[] @relation("UserWallets")
  orders      Order[]      @relation("OrderUser")
  roles       Role[]       @relation("UserRoles")
  Resource    Resource[]   @relation("ResourceUser")
  carousels   Carousel[]   @relation("CarouselCreatedBy")
  fields      Field[]      @relation("FieldCreatedBy")

  @@map("users")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")

  @@map("roles")
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[] @relation("RolePermissions")

  @@map("permissions")
}

model UserWallet {
  id         String     @id @default(cuid())
  user_id    String
  user       User       @relation("UserWallets", fields: [user_id], references: [id])
  walletType WalletType @default(MAIN)
  balance    Decimal    @db.Decimal(10, 2)
  currency   String     @default("THB")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  userWalletTransactions UserWalletTransaction[] @relation("UserWalletTransactions")

  @@map("user_wallets")
}

model UserWalletTransaction {
  id             String            @id @default(cuid())
  type           TransactionType   @default(TOPUP)
  wallet_id      String
  wallet         UserWallet        @relation("UserWalletTransactions", fields: [wallet_id], references: [id])
  amount         Decimal           @db.Decimal(10, 2)
  balance_before Decimal           @db.Decimal(10, 2)
  balance_after  Decimal           @db.Decimal(10, 2)
  reference      String?
  status         TransactionStatus @default(PENDING)
  currency       String            @default("THB")
  payment_method String            @default("unknown")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([wallet_id])
  @@index([type])
  @@index([payment_method])
  @@map("user_wallet_transactions")
}

model Category {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] @relation("ProductCategory")

  @@index([slug])
  @@index([name])
  @@map("categories")
}

model ProductTag {
  id        String         @id @default(cuid())
  slug      String         @unique
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      ProductTagType @default(USER_DEFINED)

  products Product[] @relation("ProductTags")

  @@index([slug])
  @@index([type])
  @@map("product_tags")
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation("ProductCategory", fields: [category_id], references: [id])
  category_id String

  productTags ProductTag[] @relation("ProductTags")
  packages    Package[]    @relation("ProductPackages")
  carousel    Carousel[]   @relation("CarouselProduct")
  fields      Field[]      @relation("ProductField")

  @@index([slug])
  @@index([category_id])
  @@index([createdAt])
  @@map("products")
}

model Package {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product    Product @relation("ProductPackages", fields: [product_id], references: [id])
  product_id String

  sale         Sale[]         @relation("SalePackages")
  orderPackage OrderPackage[] @relation("OrderPackages")

  @@index([product_id])
  @@index([price])
  @@map("packages")
}

model Sale {
  id           String       @id @default(cuid())
  name         String
  discountType DiscountType @default(PERCENT)
  discount     Decimal      @db.Decimal(10, 2)
  startAt      DateTime
  endAt        DateTime
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  package Package[] @relation("SalePackages")

  @@index([startAt])
  @@index([endAt])
  @@index([isActive])
  @@index([discountType])
  @@map("sales")
}

model Order {
  id        String      @id @default(cuid())
  user      User        @relation("OrderUser", fields: [user_id], references: [id])
  user_id   String
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING_PAYMENT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  orderPackages OrderPackage[] @relation("OrderPackages")

  @@map("orders")
}

model OrderPackage {
  id         String   @id @default(cuid())
  order      Order    @relation("OrderPackages", fields: [order_id], references: [id])
  order_id   String
  package    Package  @relation("OrderPackages", fields: [package_id], references: [id])
  package_id String
  amount     Int
  price      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("order_packages")
}

model Resource {
  id        String       @id @default(cuid())
  url       String
  type      ResourceType @default(IMAGE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user    User   @relation("ResourceUser", fields: [user_id], references: [id])
  user_id String

  carousel Carousel[] @relation("CarouselImage")

  @@map("resources")
}

model Carousel {
  id          String         @id @default(cuid())
  title       String
  status      CarouselStatus @default(DRAFT)
  image       Resource       @relation("CarouselImage", fields: [resource_id], references: [id])
  resource_id String
  product     Product?       @relation("CarouselProduct", fields: [product_id], references: [id])
  product_id  String?

  creator    User   @relation("CarouselCreatedBy", fields: [creator_id], references: [id])
  creator_id String

  order     Int      @default(-1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carousels")
}

model Field {
  id          String    @id @default(cuid())
  label       String
  placeholder String?
  metadata    Json
  type        FieldType @default(TEXT)

  creator    User   @relation("FieldCreatedBy", fields: [creator_id], references: [id])
  creator_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] @relation("ProductField")

  @@map("fields")
}

enum ProductTagType {
  USER_DEFINED
  SYSTEM
}

enum DiscountType {
  PERCENT
  FIXED
}

enum WalletType {
  MAIN
}

enum TransactionType {
  TOPUP
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ResourceType {
  IMAGE
}

enum CarouselStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum FieldType {
  TEXT
  EMAIL
  SELECT
}
